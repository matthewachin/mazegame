let mouseDown=!1,direction="top",startCell=null,lastHoverCell=null,isDrawing=!0,isDrawingMode=!1,wallPlaced=!1,mouseCheckInterval=null,intervalDelay=50,mouseData={x:null,y:null,t:null};function enableDrawControls(){disableControls(),document.onmousedown=mouseDownFunc,document.onmouseup=mouseUpFunc,document.onmousemove=function(a){mouseData.x=a.x,mouseData.y=a.y,mouseData.t=a.target},mouseCheckInterval=setInterval(mouseInterval,intervalDelay)}function enableEraseControls(){disableControls(),document.onmousedown=mouseDownFuncErase,document.onmouseup=mouseUpFuncErase,document.onmouseover=mouseOverFuncErase}function showHover(a,b){if(null!==lastHoverCell&&lastHoverCell.toggleClass(!1,lastHoverdirection,"hover"),mouseDown)b.toggleClass(!0,direction,"hover"),lastHoverCell=b,lastHoverdirection=direction;else{const c=getDirection(a,b);b.toggleClass(!0,c,"hover"),lastHoverCell=b,lastHoverdirection=c}}function getDirection(a,b){const c=b.e.getBoundingClientRect(),d=a.x-c.left+a.y-c.top<c.width,e=a.y-c.top+c.right-a.x<c.width;return d?e?"top":"left":e?"right":"bottom"}function updatePending(a,b,c,d,e){if(Array.from(document.getElementsByClassName(`${e}Pending`)).forEach(function(a){maze.getCellObject(a).toggleClass(!1,e,"pending")}),"top"==e||"bottom"==e){const c=Math.min(b,d),f=Math.max(b,d);for(let b=c;b<=f;b++)maze.grid[a][b].toggleClass(!0,e,"pending")}else{const d=Math.min(a,c),f=Math.max(a,c);for(let a=d;a<=f;a++)maze.grid[a][b].toggleClass(!0,e,"pending")}}function disableControls(){mouseDown=!1,lastHoverCell=null,startCell=null,direction="top",document.onmousedown=null,document.onmouseup=null,document.onmousemove=null,document.onmouseover=null,removeClassAll("topHover"),removeClassAll("bottomHover"),removeClassAll("leftHover"),removeClassAll("rightHover"),removeClassAll("topPending"),removeClassAll("bottomPending"),removeClassAll("leftPending"),removeClassAll("rightPending"),removeClassAll("hoverCell"),removeClassAll("pendingCell"),clearInterval(mouseCheckInterval)}function editInterval(a){mouseCheckInterval=setInterval(mouseInterval,a)}function mouseInterval(){const a=mouseData.t,b={x:mouseData.x,y:mouseData.y};try{const c=maze.getCellObject(a);mouseDown&&lastHoverCell!==c&&updatePending(startCell.getRow(),startCell.getColumn(),c.getRow(),c.getColumn(),direction),showHover(b,c)}catch{}}function capitalize(a){return 2>a.length?a:a[0].toUpperCase()+a.slice(1)}function mouseUpFunc(){mouseDown=!1,editInterval(50),Array.from(document.getElementsByClassName(`${direction}Pending`)).forEach(function(a){const b=maze.getCellObject(a);if(b.toggleClass(!1,direction,"pending"),isDrawing?b.toggleClass(!0,direction,"wall"):b.toggleClass(!1,direction,"wall"),wallPlaced=!0,b.isMazeEdge()){console.log("true");const a=b.row,c=b.col;b.toggleEntrance(!1),a||b.isTopWall()?null:b.toggleEntrance(!0),c||b.isLeftWall()?null:b.toggleEntrance(!0),a!=maze.totalRows-1||b.isBottomWall()?null:b.toggleEntrance(!0),c!=maze.totalColumns-1||b.isRightWall()?null:b.toggleEntrance(!0)}}),wallPlaced?maze.aStarSolveInstant(showSolution):null,wallPlaced=!1}function mouseDownFunc(a){mouseDown=!0;const b=a.target;if(b.classList.contains("cell")){const c={x:a.x,y:a.y};editInterval(25),startCell=maze.getCellObject(b),direction=getDirection(c,startCell),b.classList.contains(`${direction}Wall`)?(startCell.toggleClass(!0,direction,"pending"),isDrawing=!1):(startCell.toggleClass(!0,direction,"pending"),isDrawing=!0)}}function mouseOverFuncErase(a){const b=a.target;if(b.classList.contains("cell")){const a=maze.getCellObject(b);if(a.toggleHoverCell(!0),null!==lastHoverCell&&lastHoverCell.toggleHoverCell(!1),mouseDown){const b=Math.min(startCell.getRow(),a.getRow()),c=Math.max(startCell.getRow(),a.getRow()),d=Math.min(startCell.getColumn(),a.getColumn()),e=Math.max(startCell.getColumn(),a.getColumn());Array.from(document.getElementsByClassName("pendingCell")).forEach(a=>{a.classList.remove("pendingCell")});for(let a=b;a<=c;a++)for(let b=d;b<=e;b++)maze.grid[a][b].togglePendingCell(!0)}lastHoverCell=a}}function mouseUpFuncErase(){mouseDown=!1,Array.from(document.getElementsByClassName("pendingCell")).forEach(a=>{const b=maze.getCellObject(a);if(b.togglePendingCell(!1),b.reset(),wallPlaced=!0,b.isMazeEdge()){const a=b.row,c=b.col;b.toggleEntrance(!1),a||b.isTopWall()?null:b.toggleEntrance(!0),c||b.isLeftWall()?null:b.toggleEntrance(!0),a!=maze.totalRows-1||b.isBottomWall()?null:b.toggleEntrance(!0),c!=maze.totalColumns-1||b.isRightWall()?null:b.toggleEntrance(!0)}}),wallPlaced?maze.aStarSolveInstant(showSolution):null,wallPlaced=!1}function mouseDownFuncErase(a){mouseDown=!0;const b=a.target;b.classList.contains("cell")&&(startCell=maze.getCellObject(b),startCell.togglePendingCell(!0),lastHoverCell=startCell)}function removeClassAll(a){Array.from(document.getElementsByClassName(a)).forEach(b=>b.classList.toggle(a))}const user=JSON.parse(document.getElementById("user").innerHTML);let generateMazeCount=0,maze=new Maze(20,20);enableDrawControls();let showSolution=!1,algDelay=1,visualizeAlg=!0;document.getElementById("feedback-button").addEventListener("click",()=>{const a=document.getElementById("feedback-div");a.classList.contains("hidden")?toggleFeedback(!0):toggleFeedback(!1)}),document.getElementById("hide-feedback").addEventListener("click",()=>{toggleFeedback(!1)}),document.getElementById("submit-size-button").addEventListener("click",()=>{setCellSize(+document.getElementById("cell-size").value)}),document.getElementById("maze-title").addEventListener("keyup",a=>{maze.title=a.target.value,console.log(maze.title)});function toggleFeedback(a){const b=document.getElementById("feedback-div"),c=document.getElementById("feedback-button");a?(b.classList.toggle("hidden",!1),c.innerHTML="Hide Feedback"):(b.classList.toggle("hidden",!0),c.innerHTML="Show Feedback")}document.getElementById("publish-button").addEventListener("click",()=>{if(console.log("called"),2!=Array.from(document.getElementsByClassName("entrance")).length)displayFeedback("Failed to publish. Mazes must have 2 entrances.","bad");else{!1===maze.aStarSolveInstant()&&displayFeedback("Failed to publish. Maze is unsolvable.");const a=maze.generateObject(),b=fetch("/sandbox",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(a=>a.json()).then(a=>{console.log("SERVER RESPONSE:",a),displayFeedback(a,"good",!0)}).catch(a=>{console.error("SERVER RESPONSE (ERROR):",a),displayFeedback(a,"bad",!1)})}});function delay_change(a){algDelay=a,document.getElementById("algorithm-speed-label").innerHTML=`${a+""} ms`}document.getElementById("clear-maze-button").addEventListener("click",()=>{maze.resetMaze()}),document.getElementById("generate-maze-button").addEventListener("click",()=>{visualizeAlg?maze.generatePrimMaze(algDelay):maze.generatePrimMazeInstant(),displayFeedback("Refrain from continously running generate maze. It may make your maze unsolvable.","medium"),generateMazeCount++}),document.getElementById("submit-dimensions-button").addEventListener("click",()=>{maze.adjustColumn(+document.getElementById("column-size").value),maze.adjustRow(+document.getElementById("row-size").value)});function toggleClass(a,b,c){document.getElementById(a).classList.toggle(b,c)}class ButtonGroup{constructor(a){this.n=a+"",this.buttons=Array.from(document.getElementsByClassName(`radioGroup${this.n}`)),this.selected=document.getElementsByClassName(`radio${this.n}-selected`)[0]}newSelection(a){this.selected.classList.remove(`radio${this.n}-selected`),this.selected=a,a.classList.add(`radio${this.n}-selected`)}addClick(a,b){this.buttons[a].addEventListener("click",b)}}const group1=new ButtonGroup(1),group2=new ButtonGroup(2),group3=new ButtonGroup(3),group4=new ButtonGroup(4),group5=new ButtonGroup(5);group1.addClick(0,a=>{group1.newSelection(a.target),toggleClass("maze-settings","hidden",!1),toggleClass("algs-settings","hidden",!0),toggleClass("editor-settings","hidden",!0)}),group1.addClick(1,a=>{group1.newSelection(a.target),toggleClass("maze-settings","hidden",!0),toggleClass("algs-settings","hidden",!1),toggleClass("editor-settings","hidden",!0)}),group1.addClick(2,a=>{group1.newSelection(a.target),toggleClass("maze-settings","hidden",!0),toggleClass("algs-settings","hidden",!0),toggleClass("editor-settings","hidden",!1)}),group2.addClick(0,a=>{group2.newSelection(a.target),enableDrawControls()}),group2.addClick(1,a=>{group2.newSelection(a.target),enableEraseControls()}),group3.addClick(0,a=>{group3.newSelection(a.target),document.querySelector(":root").style.setProperty("--gridLine","rgb(67, 53, 53)")}),group3.addClick(1,a=>{group3.newSelection(a.target),document.querySelector(":root").style.setProperty("--gridLine","transparent")}),group4.addClick(0,a=>{group4.newSelection(a.target),showSolution=!0,visualizeAlg?maze.aStarSolve(algDelay):maze.aStarSolveInstant(!0)}),group4.addClick(1,a=>{group4.newSelection(a.target),showSolution=!1,maze.editClassAll("solved",!1)}),group5.addClick(0,a=>{group5.newSelection(a.target),visualizeAlg=!0}),group5.addClick(1,a=>{group5.newSelection(a.target),visualizeAlg=!1}),setCellSize(user.settings.cell_size),toggleGrid(user.settings.grid_lines),user.settings.grid_lines||group3.newSelection(document.getElementsByClassName("radioGroup3 radio-right")[0]);