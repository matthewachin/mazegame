let mouseDown,lastHoverCell,isDrawing,solveControls_entrances,userPathForward,userPathBackwards,userSolution;function mouseOverFunc(a){const b=a.target;if(b.classList.contains("cell")){null===lastHoverCell?null:lastHoverCell.toggleHoverCell(!1);const a=maze.getCellObject(b);a.toggleHoverCell(!0),lastHoverCell=a,a.isUserPath()||addUserPath(a)}}function enableControls(){document.onmouseover=mouseOverFunc,document.ontouchmove=mouseOverFunc}function disableControls(){document.onmousedown=null,document.onmouseup=null,document.onmouseover=null,document.ontouchmove=null,mouseDown=!1,lastHoverCell=null,isDrawing=!0,userPathForward=[],userPathBackwards=[]}function addUserPath(a){const b=a.getNeighbors(!0,!1).filter(a=>a.isUserPath()),c=b.length;if(c){const c=Math.min(...b.map(a=>{const b=userPathForward.indexOf(a);return-1==b?1/0:b})),d=Math.min(...b.map(a=>{const b=userPathBackwards.lastIndexOf(a);return-1==b?1/0:b}));let e=!1;if(c!==1/0)if(c!==userPathForward.length-1){let b=userPathForward.slice(0,c+1);for(let a=c+1;a<userPathForward.length;a++)userPathForward[a].toggleUserPath(!1);userPathForward=b,a.toggleUserPath(!0),userPathForward.push(a),e=!0}else a.toggleUserPath(!0),userPathForward.push(a),e=!0;if(d!==1/0)if(0!==d){let b=userPathBackwards.slice(d);for(let a=0;a<d;a++)userPathBackwards[a].toggleUserPath(!1);userPathBackwards=b,a.toggleUserPath(!0),userPathBackwards.unshift(a)}else e?(userSolution=userPathForward.concat(userPathBackwards),mazeSolved(userSolution)):(a.toggleUserPath(!0),userPathBackwards.unshift(a))}}function deleteUserPath(a){if(!a.isEntrance()){a.toggleUserPath(!1);const b=userPathForward.indexOf(a),c=userPathBackwards.lastIndexOf(a);if(-1!==b){for(let a=b;a<userPathForward.length;a++)userPathForward[a].toggleUserPath(!1);userPathForward=userPathForward.slice(0,b)}else if(-1!==c){for(let a=0;a<c+1;a++)userPathBackwards[a].toggleUserPath(!1);userPathBackwards=userPathBackwards.slice(c+1)}}}let results=!1,firstSolutionClick=!0;const resultsModal=new bootstrap.Modal(document.getElementById("solved-maze-modal"),{keyboard:!0,focus:!0,backdrop:!0}),failedModal=new bootstrap.Modal(document.getElementById("failed-maze-modal"),{keyboard:!0,focus:!0,backdrop:!0});function enableButtons(){document.getElementById("editor-settings-button").addEventListener("click",a=>{const b=document.getElementById("editor-settings");b.classList.contains("hidden")?(b.classList.remove("hidden"),a.target.innerHTML="Hide Settings"):(b.classList.add("hidden"),a.target.innerHTML="Show Settings")}),document.getElementById("solution-button").addEventListener("click",a=>{firstSolutionClick?(document.getElementById("results-button").classList.remove("hidden"),document.getElementById("random-button").classList.remove("hidden"),maze.revealSolution(),failedModal.show(),timer.off(),a.target.innerHTML="Hide Solution",results=!1,firstSolutionClick=!1,disableControls()):"Show"==a.target.innerHTML.slice(0,4)?(maze.revealSolution(),a.target.innerHTML="Hide Solution"):(maze.hideSolution(),a.target.innerHTML="Show Solution")}),document.getElementById("results-button").addEventListener("click",()=>{results?resultsModal.show():failedModal.show()}),Array.from(document.getElementsByClassName("toggleMazeList")).forEach(a=>a.addEventListener("click",()=>{window.location.href="/maze-list"})),Array.from(document.getElementsByClassName("toggleRandomMaze")).forEach(a=>a.addEventListener("click",()=>{}))}function mazeSolved(a){console.log("SOLVE DETECTED!"),timer.off(),results=!0,firstSolutionClick=!1;const b=a.length,c=Math.floor(timer.getElapsedTime(!1)/1e3),d=maze.solution.length,e=Math.floor(Math.max(1e3-c,20)*Math.max(1-(b-d)/d,.2));if(document.getElementById("results-time").innerHTML=timer.getElapsedTime(),document.getElementById("results-path").innerHTML=a.length,document.getElementById("results-score").innerHTML=e+"",maze.solves+=1,Array.from(document.getElementsByClassName("maze-solves")).forEach(a=>{a.innerHTML=maze.solves+""}),e>maze.highscore){maze.highscore=e,maze.highestscorer=user.username;const a=Array.from(document.getElementsByClassName("maze-high-score"));a.forEach(a=>{a.innerHTML=maze.highscore}),Array.from(document.getElementsByClassName("maze-highest-scorer")).forEach(a=>{a.innerHTML=maze.highestscorer})}console.log(JSON.stringify({id:maze.id,highscore:maze.highscore,highestscorer:maze.highestscorer,solves:maze.solves}));fetch("/solve",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:maze.id,highscore:maze.highscore,highestscorer:maze.highestscorer,solves:maze.solves})}).then(a=>a.json()).then(a=>{console.log("SERVER RESPONSE:",a)}).catch(a=>{console.error("SERVER RESPONSE (ERROR):",a)});document.getElementById("solution-button").innerHTML="Hide Solution",document.getElementById("results-button").classList.remove("hidden"),document.getElementById("random-button").classList.remove("hidden"),resultsModal.show(),maze.revealSolution(),disableControls()}function loadNewMaze(a){firstSolutionClick=!0,maze.hideSolution(),results=!1,maze.loadTable(a),resultsModal.hide(),failedModal.hide(),document.getElementById("maze-title").innerHTML=a.title,document.getElementById("solution-button").classList.remove("hidden"),document.getElementById("results-button").classList.add("hidden"),document.getElementById("random-button").classList.add("hidden"),document.getElementById("solution-button").innerHTML="Show Solution",Array.from(document.getElementsByClassName("maze-high-score")).forEach(b=>{b.innerHTML=a.highscore+""}),Array.from(document.getElementsByClassName("maze-highest-scorer")).forEach(b=>{b.innerHTML=a.highestscorer+""}),Array.from(document.getElementsByClassName("maze-title")).forEach(b=>{b.innerHTML=a.title+""}),Array.from(document.getElementsByClassName("maze-path-min")).forEach(b=>{b.innerHTML=a.solution.length+""}),Array.from(document.getElementsByClassName("maze-solves")).forEach(b=>{b.innerHTML=a.solves+""}),Array.from(document.getElementsByClassName("maze-creator")).forEach(b=>{b.innerHTML=a.creator+""}),lastHoverCell=null,isDrawing=!0,solveControls_entrances=Array.from(document.getElementsByClassName("entrance")),solveControls_entrances.forEach(a=>a.classList.add("userPath")),userPathForward=[maze.getCellObject(solveControls_entrances[0])],userPathBackwards=[maze.getCellObject(solveControls_entrances[1])],userSolution=[],enableControls(),enableButtons(),mouseDown=!1}let maze=new Maze(null),timer=new Timer;const user=JSON.parse(document.getElementById("user").innerHTML);toggleGrid(!1),setCellSize(user.settings.cell_size),timer.on(30),loadNewMaze(JSON.parse(document.getElementById("start-maze-data").innerHTML));