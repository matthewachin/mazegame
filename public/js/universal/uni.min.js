class Cell{constructor(a,b,c){this.e=a,this.row=b,this.col=c}isEntrance(){return this.e.classList.contains("entrance")}isUserPath(){return this.e.classList.contains("userPath")}isMazeEdge(){return this.e.classList.contains("mazeEdge")}isRightWall(){return this.e.classList.contains("rightWall")}isLeftWall(){return this.e.classList.contains("leftWall")}isBottomWall(){return this.e.classList.contains("bottomWall")}isTopWall(){return this.e.classList.contains("topWall")}isVisited(){return this.e.classList.contains("visited")}isNeighbor(){return this.e.classList.contains("neighbor")}isSolved(){return this.e.classList.contains("solved")}toggleEntrance(a){this.e.classList.toggle("entrance",a)}toggleUserPath(a){this.e.classList.toggle("userPath",a)}toggleMazeEdge(a){this.e.classList.toggle("mazeEdge",a)}toggleVisited(a){this.e.classList.toggle("visited",a)}toggleNeighbor(a){this.e.classList.toggle("neighbor",a)}toggleSolved(a){this.e.classList.toggle("solved",a)}toggleRightWall(a){const b=this.getRight();b?b.e.classList.toggle("leftWall",a):null,this.e.classList.toggle("rightWall",a)}toggleLeftWall(a){const b=this.getLeft();b?b.e.classList.toggle("rightWall",a):null,this.e.classList.toggle("leftWall",a)}toggleBottomWall(a){const b=this.getBottom();b?b.e.classList.toggle("topWall",a):null,this.e.classList.toggle("bottomWall",a)}toggleTopWall(a){const b=this.getTop();b?b.e.classList.toggle("bottomWall",a):null,this.e.classList.toggle("topWall",a)}toggleRightPending(a){const b=this.getRight();b?b.e.classList.toggle("leftPending",a):null,this.e.classList.toggle("rightPending",a)}toggleLeftPending(a){const b=this.getLeft();b?b.e.classList.toggle("rightPending",a):null,this.e.classList.toggle("leftPending",a)}toggleBottomPending(a){const b=this.getBottom();b?b.e.classList.toggle("topPending",a):null,this.e.classList.toggle("bottomPending",a)}toggleTopPending(a){const b=this.getTop();b?b.e.classList.toggle("bottomPending",a):null,this.e.classList.toggle("topPending",a)}togglePendingCell(a){this.e.classList.toggle("pendingCell",a)}toggleRightHover(a){const b=this.getRight();b?b.e.classList.toggle("leftHover",a):null,this.e.classList.toggle("rightHover",a)}toggleLeftHover(a){const b=this.getLeft();b?b.e.classList.toggle("rightHover",a):null,this.e.classList.toggle("leftHover",a)}toggleBottomHover(a){const b=this.getBottom();b?b.e.classList.toggle("topHover",a):null,this.e.classList.toggle("bottomHover",a)}toggleTopHover(a){const b=this.getTop();b?b.e.classList.toggle("bottomHover",a):null,this.e.classList.toggle("topHover",a)}toggleHoverCell(a){this.e.classList.toggle("hoverCell",a)}toggleClass(a,b,c){"hover"==c?"top"==b?this.toggleTopHover(a):"right"==b?this.toggleRightHover(a):"left"==b?this.toggleLeftHover(a):"bottom"==b&&this.toggleBottomHover(a):"pending"==c?"top"==b?this.toggleTopPending(a):"right"==b?this.toggleRightPending(a):"left"==b?this.toggleLeftPending(a):"bottom"==b&&this.toggleBottomPending(a):"wall"==c&&("top"==b?this.toggleTopWall(a):"right"==b?this.toggleRightWall(a):"left"==b?this.toggleLeftWall(a):"bottom"==b&&this.toggleBottomWall(a))}hasLeft(a=!1){return a?0<this.col&&!this.isLeftWall():0<this.col}hasRight(a=!1){return a?this.col<maze.totalColumns-1&&!this.isRightWall():this.col<maze.totalColumns-1}hasBottom(a=!1){return a?this.row<maze.totalRows-1&&!this.isBottomWall():this.row<maze.totalRows-1}hasTop(a=!1){return a?0<this.row&&!this.isTopWall():0<this.row}getLeft(a=!1){return this.hasLeft(a)?maze.grid[this.row][this.col-1]:null}getRight(a=!1){return this.hasRight(a)?maze.grid[this.row][this.col+1]:null}getTop(a=!1){return this.hasTop(a)?maze.grid[this.row-1][this.col]:null}getBottom(a=!1){return this.hasBottom(a)?maze.grid[this.row+1][this.col]:null}isTopNeighbor(a,b){return this.row-1==a&&this.col==b}isBottomNeighbor(a,b){return this.row+1==a&&this.col==b}isRightNeighbor(a,b){return this.row==a&&this.col+1==b}isLeftNeighbor(a,b){return this.row==a&&this.col-1==b}getNeighbors(a=!1,b=!1){return b?[[this.getLeft(a),"W"],[this.getRight(a),"E"],[this.getTop(a),"N"],[this.getBottom(a),"S"]].filter(a=>null!==a[0]):[this.getTop(a),this.getLeft(a),this.getRight(a),this.getBottom(a)].filter(a=>null!==a)}getRow(){return this.row}getColumn(){return this.col}getElement(){return this.e}getManhattanDist(a,b){return Math.abs(a-this.row)+Math.abs(b-this.col)}getID(){return`${this.row}_${this.col}`}reset(){this.toggleTopWall(!1),this.toggleLeftWall(!1),this.toggleRightWall(!1),this.toggleBottomWall(!1)}}let MAZE_VARIABLES;class Maze{constructor(a,b){null==a?(this.e=document.getElementById("main-grid"),this.totalRows,this.totalColumns,this.grid,this.solution,this.turns,this.highestscorer,this.highscore,this.title,this.creator,this.solves,this.difficulty,this.wallcount):(this.totalRows=a,this.totalColumns=b,this.e=document.getElementById("main-grid"),this.grid=this.generateGrid(!0),this.solution,this.turns,this.highestscorer="",this.highscore=0,this.title="Anonymous Maze",this.creator=user.username||"Anonymouse User",this.solves=0,this.difficulty=null,this.wallcount,this.resetMazeVars(),setTimeout(()=>maze.aStarSolveInstant(!1),5))}resetTableElement(){document.getElementById("main-grid").remove();const a=document.createElement("table");a.setAttribute("id","main-grid"),document.getElementById("main-grid-div").appendChild(a),this.e=a}createHTMLGrid(){let a=this.e;this.deleteAllChildren(a);for(let b,c=0;c<this.totalRows;c++){b=document.createElement("tr"),b.setAttribute("id",`row-${c}`);for(let a,d=0;d<this.totalColumns;d++)a=document.createElement("td"),a.setAttribute("draggable",!1),a.classList.add("cell"),c?null:a.classList.add("topWall","mazeEdge"),c==this.totalRows-1?a.classList.add("bottomWall","mazeEdge"):null,d==this.totalColumns-1?a.classList.add("rightWall","mazeEdge"):null,d?null:a.classList.add("leftWall","mazeEdge"),a.setAttribute("id",`${c}_${d}`),b.appendChild(a);a.appendChild(b)}}generateGrid(a=!1){this.createHTMLGrid();const b=[];for(let c=0;c<this.totalRows;c++){b.push([]);for(let a=0;a<this.totalColumns;a++){const d=document.getElementById(`${c}_${a}`);b[c].push(new Cell(d,c,a))}}return a&&(b[0][0].e.classList.remove("topWall"),b[0][0].e.classList.add("entrance"),b[this.totalRows-1][this.totalColumns-1].e.classList.remove("bottomWall"),b[this.totalRows-1][this.totalColumns-1].e.classList.add("entrance")),b}generateObject(){const a=this.aStarSolveInstant(!1,!0),b=this.turns;let c={totalRows:this.totalRows,totalColumns:this.totalColumns,highestscorer:this.highestscorer,highscore:this.highscore,title:this.title,creator:this.creator,solves:this.solves,turns:b,wallcount:null,difficulty:null,solution:a,grid:[]},d=0;const e=c.grid;for(let a=0;a<this.totalRows;a++){e.push([]);for(let b,c=0;c<this.totalColumns;c++){b=[];const f=this.grid[a][c];f.isTopWall()&&(b.push(0),d++),f.isRightWall()&&(b.push(1),d++),f.isBottomWall()&&(b.push(2),d++),f.isLeftWall()&&(b.push(3),d++),e[a].push(b)}}c.wallcount=Math.floor(d/2);const f=.05,g=.2,h=.55,i=.2,j=c.totalRows*c.totalColumns,k=Math.sqrt(j),l=Math.max((c.solution.length-(c.totalRows+c.totalColumns-2))/k*1.5),m=Math.max((c.wallcount-2*c.totalRows-2*c.totalColumns+2)*1/j,0);return c.difficulty=Math.floor(100*(Math.min(j/1e4*h,h)+Math.min(f*l,f)+Math.min(b*.7/k*g,g)+Math.min(m*i,i))),c}loadTable(a){this.grid=[],this.totalRows=a.totalRows,this.totalColumns=a.totalColumns,this.solution=a.solution,this.id=a.id,this.highestscorer=a.highestscorer,this.highscore=a.highscore,this.title=a.title,this.solves=a.solves,this.turns=a.turns,this.creator=a.creator,this.wallcount=a.wallCount,this.difficulty=a.difficulty;for(let b=0;b<a.totalRows;b++){this.grid.push([]);const c=document.createElement("tr");c.setAttribute("id",`row-${b}`);for(let d=0;d<a.totalColumns;d++){const e=`${b}_${d}`,f=a.grid[b][d].map(a=>a?1==a?"right":2==a?"bottom":3==a?"left":null:"top"),g=document.createElement("td");f.forEach(a=>{g.classList.add(`${a}Wall`)}),g.classList.add("cell"),g.setAttribute("id",e),c.appendChild(g),this.grid[b].push(new Cell(g,b,d))}this.e.appendChild(c)}for(let b=0;b<this.totalRows;b++){const a=this.grid[b][0],c=this.grid[b][this.totalColumns-1];a.isLeftWall()?a.e.classList.add("mazeEdge"):a.e.classList.add("mazeEdge","entrance"),c.isRightWall()?c.e.classList.add("mazeEdge"):c.e.classList.add("mazeEdge","entrance")}for(let b=0;b<this.totalColumns;b++){const a=this.grid[0][b],c=this.grid[this.totalRows-1][b];a.isTopWall()?a.e.classList.add("mazeEdge"):a.e.classList.add("mazeEdge","entrance"),c.isBottomWall()?c.e.classList.add("mazeEdge"):c.e.classList.add("mazeEdge","entrance")}}getTotalRows(){return this.totalRows}getTotalColumns(){return this.totalColumns}getGrid(){return this.grid}deleteAllChildren(a){for(;a.firstChild;)a.removeChild(a.firstChild)}getCellObject(a){const b=a.id.split("_").map(function(a){return+a});return this.grid[b[0]][b[1]]}editAllCells(a){for(let b=0;b<this.totalRows;b++)for(let c=0;c<this.totalColumns;c++)a(this.grid[b][c])}aStarSolveInstant(a=!1,b=!0){const c=Array.from(document.getElementsByClassName("entrance"));if(this.editClassAll("solved",!1),2!==c.length)return void displayFeedback("Mazes must have 2 entrances.","bad");const d=this.getCellObject(c[0]),e=this.getCellObject(c[1]);let f=!0,g=d.getNeighbors(!0).reverse(),h=1,i={};const j=e.getRow(),k=e.getColumn();for(this.editClassAll("visited",!1),this.editClassAll("neighbor",!1),g.forEach(a=>a.toggleNeighbor(!0)),g.forEach(function(a){i[a.getID()]={d:h,m:a.getManhattanDist(j,k),p:d.getID()}}),g.sort(function(c,a){const b=i[c.getID()],d=i[a.getID()];return b.d+b.m-d.d-d.m}),d.toggleVisited(!0);g.length&&f;){const a=g.splice(0,1)[0],b=a.getID(),c=i[b];if(a.toggleNeighbor(!1),a==e){a.toggleVisited(!0),f=!1;break}h=c.d;const d=a.getNeighbors(!0).filter(a=>!a.isVisited());d.forEach(function(a){const c=a.getID(),d=h+1,e=a.getManhattanDist(j,k);if(a.isNeighbor()){let f=i[c];f.d+f.m>d+e&&(i[c]={d:d,m:e,p:b},g.splice(g.indexOf(a),1),maze.insertSorted(g,a,i))}else i[c]={d:d,m:e,p:b}}),d.filter(a=>!a.isNeighbor()).forEach(a=>this.insertSorted(g,a,i)),d.forEach(a=>a.toggleNeighbor(!0)),a.toggleVisited(!0)}if(this.editClassAll("visited",!1),this.editClassAll("neighbor",!1),!f){a?e.toggleSolved(!0):null;let c=e,f=e.getID(),g=f.split("_").map(a=>+a),h=[0,0],j=[f],k=0;for(;c!==d;){const d=i[f].p;if(b){const a=d.split("_").map(a=>+a),b=a[0]-g[0],c=a[1]-g[1];b==h[0]&&c==h[1]||k++,g=a,h=[b,c]}c=this.getCellByID(d),a?c.toggleSolved(!0):null,j.push(d),f=d}return this.solution=j.reverse(),b?this.turns=k:null,this.solution}return displayFeedback("No valid solution.","bad"),!1}revealSolution(a=this.solution,b=0){if(b){for(let c=0;c<a.length;c++)setTimeout(a=>{a.toggleSolved(!0)},c*b,this.getCellByID(a[c]));return}a.forEach(a=>{this.getCellByID(a).toggleSolved(!0)})}hideSolution(){this.editClassAll("solved",!1)}aStarSolve(a=0){if(this.resetMazeVars(),!a)return void this.aStarSolveInstant(!0);this.editClassAll("solved",!1);const b=Array.from(document.getElementsByClassName("entrance"));if(2!==b.length)return void displayFeedback("Mazes must have 2 entrances.","bad");const c=this.getCellObject(b[0]),d=this.getCellObject(b[1]);let e=c.getNeighbors(!0).reverse(),f=1,g={};const h=d.getRow(),i=d.getColumn();this.editClassAll("visited",!1),this.editClassAll("neighbor",!1),this.editClassAll("solved",!1),e.forEach(a=>a.toggleNeighbor(!0)),e.forEach(function(a){g[a.getID()]={d:f,m:a.getManhattanDist(h,i),p:c.getID()}}),e.sort(function(c,a){const b=g[c.getID()],d=g[a.getID()];return b.d+b.m-d.d-d.m}),c.toggleVisited(!0),MAZE_VARIABLES.notSolved=!0;let j=setInterval(function(b,c,d,e){if(!(b.length&&MAZE_VARIABLES.notSolved))clearInterval(j),MAZE_VARIABLES.notSolved?displayFeedback("No solution found. Maze is not solvable.","bad"):(maze.editClassAll("visited",!1),maze.editClassAll("neighbor",!1),e.toggleSolved(!0),MAZE_VARIABLES.solve_cell=e,MAZE_VARIABLES.lastID=e.getID(),MAZE_VARIABLES.path=[MAZE_VARIABLES.lastID],MAZE_VARIABLES.solvingPath=setInterval(function(a,b){if(MAZE_VARIABLES.solve_cell==a)clearInterval(MAZE_VARIABLES.solvingPath),maze.solution=MAZE_VARIABLES.path.reverse();else{const a=b[MAZE_VARIABLES.lastID].p;MAZE_VARIABLES.solve_cell=maze.getCellByID(a),MAZE_VARIABLES.solve_cell.toggleSolved(!0),MAZE_VARIABLES.path.push(a),MAZE_VARIABLES.lastID=a}},a,d,c));else{const a=b.splice(0,1)[0],d=a.getID(),g=c[d];a.toggleNeighbor(!1),a==e&&(a.toggleVisited(!0),MAZE_VARIABLES.notSolved=!1),f=g.d;const j=a.getNeighbors(!0).filter(a=>!a.isVisited());j.forEach(function(a){const e=a.getID(),g=f+1,j=a.getManhattanDist(h,i);if(a.isNeighbor()){let f=c[e];f.d+f.m>g+j&&(c[e]={d:g,m:j,p:d},b.splice(b.indexOf(a),1),maze.insertSorted(b,a,c))}else c[e]={d:g,m:j,p:d}}),j.filter(a=>!a.isNeighbor()).forEach(a=>maze.insertSorted(b,a,c)),j.forEach(a=>a.toggleNeighbor(!0)),a.toggleVisited(!0)}},a,e,g,c,d)}editClassAll(a,b){Array.from(document.getElementsByClassName(a)).forEach(c=>c.classList.toggle(a,b))}insertSorted(a,b,c){let d=0,e=a.length-1;const f=c[b.getID()],g=f.d+f.m;for(;d<=e;){const b=Math.floor((d+e)/2),f=c[a[b].getID()];f.m+f.d<g?d=b+1:e=b-1}const h=d;a.splice(h,0,b)}generatePrimMaze(a=1,b=this.grid[Math.floor(Math.random()*this.totalRows)][Math.floor(Math.random()*this.totalColumns)]){if(this.resetMazeVars(),!a)return void this.generatePrimMazeInstant(b);MAZE_VARIABLES.touching=b.getNeighbors(!0),this.editClassAll("visited",!1),this.editClassAll("neighbor",!1),this.editClassAll("solved",!1),MAZE_VARIABLES.touching.forEach(a=>a.toggleNeighbor(!0)),b.toggleVisited(!0);for(let c=0;c<this.totalColumns*this.totalRows-1;c++)setTimeout(function(){const a=randomIndex(MAZE_VARIABLES.touching),b=MAZE_VARIABLES.touching.splice(a,1)[0];let c=b.getNeighbors(!0).filter(a=>a.isVisited()),d=c.length;for(;1<d;){const a=c.splice(randomIndex(c),1)[0],e=a.getRow(),f=a.getColumn();b.isRightNeighbor(e,f)?b.toggleRightWall(!0):b.isLeftNeighbor(e,f)?b.toggleLeftWall(!0):b.isTopNeighbor(e,f)?b.toggleTopWall(!0):b.isBottomNeighbor(e,f)&&b.toggleBottomWall(!0),d--}b.toggleVisited(!0),b.toggleNeighbor(!1);const e=b.getNeighbors(!0).filter(a=>!a.isVisited()&&!a.isNeighbor());e.forEach(a=>a.toggleNeighbor(!0)),MAZE_VARIABLES.touching=MAZE_VARIABLES.touching.concat(e)},c*a);setTimeout(function(){MAZE_VARIABLES.touching=null,maze.editClassAll("visited",!1),maze.editClassAll("neighbor",!1),setTimeout(()=>{try{maze.aStarSolveInstant(showSolution)}catch{maze.aStarSolveInstant(!1)}},5)},maze.totalColumns*maze.totalRows*a+200)}generatePrimMazeInstant(a=this.grid[0][0]){let b=a.getNeighbors(!0);for(this.editClassAll("visited",!1),this.editClassAll("neighbor",!1),this.editClassAll("solved",!1),b.forEach(a=>a.toggleNeighbor(!0)),a.toggleVisited(!0);b.length;){const a=randomIndex(b),c=b.splice(a,1)[0];let d=c.getNeighbors(!0).filter(a=>a.isVisited()),e=d.length;for(;1<e;){const a=d.splice(randomIndex(d),1)[0],b=a.getRow(),f=a.getColumn();c.isRightNeighbor(b,f)?c.toggleRightWall(!0):c.isLeftNeighbor(b,f)?c.toggleLeftWall(!0):c.isTopNeighbor(b,f)?c.toggleTopWall(!0):c.isBottomNeighbor(b,f)&&c.toggleBottomWall(!0),e--}c.toggleVisited(!0),c.toggleNeighbor(!1);const f=c.getNeighbors(!0).filter(a=>!a.isVisited()&&!a.isNeighbor());f.forEach(a=>a.toggleNeighbor(!0)),b=b.concat(f)}this.editClassAll("visited",!1),this.editClassAll("neighbor",!1);try{maze.aStarSolveInstant(showSolution)}catch{maze.aStarSolveInstant(!1)}}getCellByID(a){const b=a.split("_");return this.grid[b[0]][b[1]]}resetMazeVars(){MAZE_VARIABLES={touching:null,notSolved:null,solvingPath:null,lastID:null,solve_cell:null,path:null,finished:!1}}resetMaze(){this.editClassAll("visited",!1),this.editClassAll("neighbor",!1),this.editClassAll("solved",!1),this.editClassAll("entrance",!1),this.editClassAll("rightWall",!1),this.editClassAll("rightPending",!1),this.editClassAll("rightHover",!1),this.editClassAll("leftWall",!1),this.editClassAll("leftPending",!1),this.editClassAll("leftHover",!1),this.editClassAll("topWall",!1),this.editClassAll("topPending",!1),this.editClassAll("topHover",!1),this.editClassAll("bottomWall",!1),this.editClassAll("bottomPending",!1),this.editClassAll("bottomHover",!1);for(let a=0;a<this.totalRows;a++)this.grid[a][0].toggleLeftWall(!0),this.grid[a][this.totalColumns-1].toggleRightWall(!0);for(let a=0;a<this.totalColumns;a++)this.grid[0][a].toggleTopWall(!0),this.grid[this.totalRows-1][a].toggleBottomWall(!0);this.grid[0][0].e.classList.remove("topWall"),this.grid[0][0].e.classList.add("entrance"),this.grid[this.totalRows-1][this.totalColumns-1].e.classList.remove("bottomWall"),this.grid[this.totalRows-1][this.totalColumns-1].e.classList.add("entrance")}adjustRow(a){if(a!=this.totalRows){for(let a=1;a<this.totalColumns-1;a++){const b=this.grid[this.totalRows-1][a];b.toggleBottomWall(!1),b.toggleMazeEdge(!1),b.isEntrance()&&(a==this.totalColumns-1&&b.isRightWall()?null:b.toggleEntrance(!1))}if(this.grid[this.totalRows-1][0].toggleBottomWall(!1),this.grid[this.totalRows-1][this.totalColumns-1].toggleBottomWall(!1),a>this.totalRows){const b=a-this.totalRows;for(let c,d=0;d<b;d++){c=document.createElement("tr"),c.setAttribute("id",`row-${this.totalRows}`);let b=[];for(let d,e=0;e<this.totalColumns;e++)d=document.createElement("td"),d.setAttribute("draggable",!1),d.classList.add("cell"),d.setAttribute("id",`${this.totalRows}_${e}`),this.totalRows==a-1?d.classList.add("bottomWall","mazeEdge"):null,e==this.totalColumns-1?d.classList.add("rightWall","mazeEdge"):null,e?null:d.classList.add("leftWall","mazeEdge"),c.appendChild(d),b.push(new Cell(d,this.totalRows,e));this.e.appendChild(c),this.grid.push(b),this.totalRows++}}else{const b=this.totalRows-a;for(let a=0;a<b;a++)this.totalRows--,this.e.deleteRow(this.totalRows),this.grid.pop();for(let a=0;a<this.totalColumns;a++)this.grid[this.totalRows-1][a].toggleBottomWall(!0),this.grid[this.totalRows-1][a].toggleMazeEdge(!0)}}}adjustColumn(a){if(a!=this.totalColumns){for(let a=1;a<this.totalRows-1;a++){const b=this.grid[a][this.totalColumns-1];b.toggleRightWall(!1),b.toggleMazeEdge(!1),b.isEntrance()&&(a==this.totalRows-1&&b.isBottomWall()?null:b.toggleEntrance(!1))}if(this.grid[0][this.totalColumns-1].toggleRightWall(!1),this.grid[this.totalRows-1][this.totalColumns-1].toggleRightWall(!1),a>this.totalColumns){const b=a-this.totalColumns;for(let c=0;c<b;c++){for(let b=0;b<this.totalRows;b++){const c=document.createElement("td");c.setAttribute("draggable",!1),c.classList.add("cell"),c.setAttribute("id",`${b}_${this.totalColumns}`),b?null:c.classList.add("topWall","mazeEdge"),b==this.totalRows-1?c.classList.add("bottomWall","mazeEdge"):null,this.totalColumns==a-1?c.classList.add("rightWall","mazeEdge"):null,document.getElementById(`row-${b}`).appendChild(c),this.grid[b].push(new Cell(c,b,this.totalColumns))}this.totalColumns++}}else{const b=this.totalColumns-a;for(let a=0;a<b;a++){this.totalColumns--;for(let a=0;a<this.totalRows;a++){const b=this.grid[a].pop();b.e.remove()}}for(let a=0;a<this.totalRows;a++)this.grid[a][this.totalColumns-1].toggleRightWall(!0),this.grid[a][this.totalColumns-1].toggleMazeEdge(!0)}this.solution=this.aStarSolveInstant(!1)}}calculateScore(){}}function randomIndex(a){return Math.floor(Math.random()*a.length)}function sleep(a){return new Promise(b=>setTimeout(b,a))}function switchMode(a){if(a){const a={"--mainText":" white","--wall":"rgb(61, 152, 227)","--pending":"rgb(0, 255, 119)","--hover":"rgb(255, 0, 72)","--start":"greenyellow","--end":"darkred","--gridLine":"rgb(67, 53, 53)","--background":"rgb(40, 40, 40)","--borderSize":"2.5px","--cellSize":"15px","--visited":"rgb(61, 49, 119)","--neighbor":"rgb(153, 54, 54)"};for(variable in a)document.querySelector(":root").style.setProperty(variable,a[variable])}else{const a={"--wall":"black","--pending":"orange","--hover":"red","--start":"greenyellow","--end":"darkred","--gridLine":"lightgrey","--background":"white","--borderSize":"2.5px","--cellSize":"15px","--visited":"rgb(61, 49, 119)","--neighbor":"rgb(153, 54, 54)"};for(variable in a)console.log(variable),document.querySelector(":root").style.setProperty(variable,a[variable])}}function displayFeedback(a,b,c=!1,d="feedback-text"){const e=document.getElementById(d);"good"==b?(e.classList.add("feedback-good"),e.classList.remove("feedback-bad"),e.classList.remove("feedback-medium")):"bad"==b?(e.classList.add("feedback-bad"),e.classList.remove("feedback-good"),e.classList.remove("feedback-medium")):(e.classList.remove("feedback-good"),e.classList.add("feedback-medium"),e.classList.remove("feedback-bad")),e.innerHTML=a,c?toggleFeedback(!0):null}function setCellSize(a){document.querySelector(":root").style.setProperty("--cellSize",`${a}px`)}function toggleGrid(a){a?document.querySelector(":root").style.setProperty("--gridLine","rgb(67, 53, 53)"):document.querySelector(":root").style.setProperty("--gridLine","transparent")}class Timer{constructor(a="timer",b=!1,c=0){this.e=document.getElementById(a),this.start=Date.now(),this.interval=null}resetTimer(){this.start=Date.now()}getElapsedTime(a=!0){return a?this.msReadable(Date.now()-this.start):Date.now()-this.start}getCurrentTime(){return Date.now()}msReadable(a){const b=Math.floor(a%100),c=Math.floor(a/1e3%60),d=Math.floor(a/60000%60),e=Math.floor(a/36e5%24);return e?`${e+""}:${this.cleanify(d)}:${this.cleanify(c)}`:d?`${d+""}:${this.cleanify(c)}:${this.cleanify(b)}`:`${c+""}:${this.cleanify(b)}`}cleanify(a){return 10>a?`0${a+""}`:a+""}update(){this.e.innerHTML=this.getElapsedTime()}on(a){this.interval=setInterval(a=>{a.update()},a,this)}off(){clearInterval(this.interval)}}