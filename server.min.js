const express=require("express"),fs=require("fs"),ejs=require("ejs"),GOOGLE_CLIENT_ID="652680169371-2pl6q3s84k8bso2remo02uchdbmorjtu.apps.googleusercontent.com",GOOGLE_CLIENT_SECRET="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",session=require("express-session"),passport=require("passport"),{json}=require("express"),GoogleStrategy=require("passport-google-oauth20").Strategy,cookie_secret=createMazeID([],64),app=express();app.use(express.json()),app.use(express.urlencoded()),app.use(express.static("public")),app.set("views",__dirname+"/views"),app.set("view engine","ejs"),app.use(session({resave:!1,saveUninitialized:!0,secret:cookie_secret,cookie:{maxAge:259200000}})),app.use(passport.initialize()),app.use(passport.session()),app.set("view engine","ejs"),app.get("/",(a,b)=>{b.status(200),b.setHeader("Content-Type","text/html"),b.render("index",{nav:"simple",logged:!1})}),passport.use(new GoogleStrategy({clientID:GOOGLE_CLIENT_ID,clientSecret:GOOGLE_CLIENT_SECRET,callbackURL:"http://localhost:3000/auth/google/callback"},function(a,b,c,d){return d(null,c.id)})),passport.serializeUser(function(a,b){b(null,a)}),passport.deserializeUser(function(a,b){b(null,a)}),app.get("/auth/google",passport.authenticate("google",{scope:["profile"]})),app.get("/auth/google/callback",passport.authenticate("google",{failureRedirect:"/login"}),function(a,b){let c=getUsers();const d=a.session.passport.user;isValidUser(d,c)?b.redirect("/maze-list"):(createUser(d,c),b.redirect("/create"))}),app.get("/login",(a,b)=>{try{a.session.passport.user;b.redirect("/maze-list")}catch{b.status(200),b.setHeader("Content-Type","text/html"),b.render("login",{nav:"simple",logged:!1})}}),app.get("/create",isLogged,(a,b)=>{b.setHeader("Content-Type","text/html"),b.render("create",{nav:"simple",logged:!0})}),app.post("/create",(a,b)=>{const c=a.body.username,d=a.session.passport.user;let e=getUser(d);e.username=c,writeUser(d,e),b.send({type:"success",nav:"simple"})}),app.get("/sandbox",isLogged,(a,b)=>{b.status(200),b.setHeader("Content-Type","text/html");const c=a.session.passport.user,d=getUser(c);b.render("sandbox",{user:JSON.stringify(d),nav:"complex",logged:!0})}),app.post("/sandbox",(a,b)=>{try{const c=a.session.passport.user;let d=getUser(c),e=a.body;const f=createMaze(e);d.mazes.push(f),writeUser(c,d),b.status(200),b.send(JSON.stringify(`Successfully saved Maze with ID: ${f}`))}catch(a){b.send(JSON.stringify(a))}}),app.get("/solve/:mazeID",isLogged,(a,b)=>{try{const c=a.params.mazeID;b.status(200),b.setHeader("Content-Type","text/html");const d=a.session.passport.user,e=getUser(d);b.render("solve",{mazeinfo:JSON.stringify(getMaze(c)),user:JSON.stringify(e),nav:"complex",logged:!0})}catch{b.redirect("/maze-list")}}),app.get("/solve",isLogged,(a,b)=>{b.redirect("/maze-list")}),app.post("/solve",isLogged,(a,b)=>{try{const c=a.session.passport.user,d=a.body,e=d.id;let f=getMaze(e);for(property in d)f[property]=d[property];fs.writeFileSync(`data/mazes/${e}_MAZE.json`,JSON.stringify(f));let g=getUser(c);g.solved.push(e),writeUser(c,g),b.send(JSON.stringify(`Successfully saved changes to Maze with ID: ${e}`))}catch{b.send(JSON.stringify("Failed to upload."))}}),app.get("/maze-list",isLogged,(a,b)=>{let c=null==a.query.count?25:a.query.count;try{let d=getMazeIDs();const e=Math.min(d.length,c);let f=[];for(let a=0;a<e;a++){const a=randomInt(d.length);f.push(d[a]),d.splice(a,1)}f=f.map(a=>{const b=getMaze(a);return{id:a,title:b.title,totalRows:b.totalRows,totalColumns:b.totalColumns,difficulty:b.difficulty,solves:b.solves,creator:b.creator}}),b.render("maze-list",{data:f,user:JSON.stringify(getUser(a.session.passport.user)),nav:"complex",count:c,logged:!0})}catch{b.render("error",{errorCode:"404",nav:"simple",logged:!0})}}),app.get("/profile",isLogged,(a,b)=>{const c=a.session.passport.user,d=getUser(c);let e=d.mazes;e=e.map(a=>{const b=getMaze(a);return{id:a,title:b.title,totalRows:b.totalRows,totalColumns:b.totalColumns,difficulty:b.difficulty,solves:b.solves}}),b.render("profile",{user:JSON.stringify(getUser(a.session.passport.user)),data:e,nav:"complex",logged:!0})}),app.get("/logout",isLogged,(a,b)=>{a.session.destroy(),b.render("logout",{nav:"simple",logged:!1})}),app.post("/profile",(a,b)=>{try{const c=a.body,d=a.session.passport.user;let e=getUser(d);if(e.settings.grid_lines=c.grid_lines,e.settings.cell_size=c.cell_size,"username"in c){e.username=c.username;const a=e.username;e.mazes.forEach(b=>{let c=getMaze(b);c.creator=a,writeMaze(b,c)})}writeUser(d,e),b.status(200),b.send(JSON.stringify("Successfully updated user info."))}catch{b.send(JSON.stringify("Failed to update user info.")),b.status(400)}}),app.post("/deleteMaze",(a,b)=>{try{const c=a.body.id,d=a.session.passport.user;let e=getUser(d);if(e.mazes.includes(c)){let a=JSON.parse(fs.readFileSync("data/mazeList.json"));a.splice(a.indexOf(c),1),e.mazes.splice(e.mazes.indexOf(c),1),fs.writeFileSync("data/mazeList.json",JSON.stringify(a)),fs.unlinkSync(`data/mazes/${c}_MAZE.json`),writeUser(d,e),b.status(200),b.send(JSON.stringify("success"))}else b.status(400),b.send(JSON.stringify("Failed, user does not own the maze."))}catch{b.status(400),b.send(JSON.stringify("failed to delete maze"))}}),app.use("",(a,b)=>{b.status(404),b.setHeader("Content-Type","text/html"),b.render("error",{errorCode:"404",nav:"simple",logged:!1})});const port=process.env.PORT||3e3;app.listen(port,function(){console.log("Server started at http://localhost:"+port+".")});function createMaze(a){let b;try{b=JSON.parse(fs.readFileSync("data/mazeList.json"));const c=createMazeID(b);return a.id=c,fs.writeFileSync(`data/mazes/${c}_MAZE.json`,JSON.stringify(a)),b.push(c),fs.writeFileSync("data/mazeList.json",JSON.stringify(b)),c}catch{throw fs.writeFileSync("data/mazeList.json",JSON.stringify(b)),"ERROR: Failed to save maze."}}function createMazeID(a,b=8){let c="";for(;isIDExists(c,a)||!c.length;){c="";for(let a=0;a<b;a++)c+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"[randomInt(62)]}return c}function isIDExists(a,b){return b.includes(a)}function randomInt(a,b=0){return Math.floor(Math.random()*a)+b}function isValidUser(a,b){return b.includes(a)}function getMaze(a){return JSON.parse(fs.readFileSync(`data/mazes/${a}_MAZE.json`))}function getUser(a){return JSON.parse(fs.readFileSync(`data/users/${a}.json`))}function getMazeIDs(){return JSON.parse(fs.readFileSync("data/mazeList.json"))}function getUsers(){return JSON.parse(fs.readFileSync("data/usersList.json"))}function createUser(a,b){fs.writeFileSync(`data/users/${a}.json`,JSON.stringify({username:null,mazes:[],solved:[],settings:{grid_lines:!0,cell_size:15}})),b.push(a),fs.writeFileSync(`data/usersList.json`,JSON.stringify(b))}function writeUser(a,b){fs.writeFileSync(`data/users/${a}.json`,JSON.stringify(b))}function writeMaze(a,b){fs.writeFileSync(`data/mazes/${a}_MAZE.json`,JSON.stringify(b))}function isLogged(a,b,c){try{const d=a.session.passport.user;if(isValidUser(d,getUsers()))c();else throw b.redirect("/login"),"Not logged in. Access not granted."}catch{throw b.redirect("/login"),"Not logged in. Access not granted."}}function usernameChange(){}